-------------------------

## Varios bugs

- Correr el programa con un debugger, sin agregar flags de
debug. ¿Tienen toda la información que requerían?

Leyendo símbolos desde add_array_segfault.e...(no se encontraron símbolos de depuración)hecho.
(gdb) run

- ¿Qué pasa si ponen el flag de debug? ¿Qué flag de optimización es el
mejor para debuggear?

Leyendo símbolos desde add_array_segfault.e...hecho.
El flag de optimizacion para debuggear es el -O0 (para que detecte bugs de MI codigo, no del codigo optimizado por el compilador)

	add_array_static.c

El programa corre pero da un resultado incorrecto. Solucion: detener el contador en las definiciones de a y b en i < n; no en i <= n+1

	add_array_dynamic.c

El programa corre, da el verdadero resultado, pero no deberia!

Solucion es la misma que la anterior

	add_array_segfault.e

Violación de segmento (`core' generado) - thats an error-error

Aca corregir la iteracion no soluciona el problema porque sigue dando el mismo error

Si intento sumar punteros como si fueran enteros, en gdb me encuentro con esto:

Old value = {0x1, 0x40070d <__libc_csu_init+77>, 0x0}
New value = {0x0, 0x40070d <__libc_csu_init+77>, 0x0}

Entonces la solucion esta en NO hacer a a y b punteros en la funcion

------------------------------

## Floating point exception


En la carpeta `fpe/` hay tres códigos de C, independientes, para
compilar.  Cada uno de estos códigos genera un ejecutable. Hay además
una carpeta que define la función `set_fpe_x87_sse_`. Una vez
compilados los tres ejecutables sin la opción `-DTRAPFPE`, responder
las siguientes preguntas:

- ¿Qué función requiere agregar `-DTRAPFPE`? ¿Cómo pueden hacer que el
programa *linkee* adecuadamente?

set_fpe_x87_sse() necesita agregar el flag en el paso de compilacion - idk how yet

voy a crear el objeto del frappe y luego el objeto de division para linkear y armar la merienda en starbucks

	gcc -c fpe_x87_sse.c -o fpe_x87_sse.o
	gcc -DTRAPFPE -c division.c -o division.o

	gcc division.o fpe_x87_sse.o -lm -o division_frappe.e 

... y asi con los otros dos!

- Para cada uno de los ejecutables, ¿qué hace agregar la opción
`-DTRAPFPE` al compilar? ¿En qué se diferencian los mensajes de salida
de los programas con y sin esa opción cuando tratan de hacer una
operación matemática prohbida, como dividir por 0 o calcular la raíz
cuadrada de un número negativo?

El frappe añade carteles de "eso esta prohibido" y evita que el programa calcule cosas prohibidas, de modo de dejar de tirar valores extraños como respuestas


----------------------

## Segmentation Fault

En la carpeta `sigsegv/` hay códigos de C y de FORTRAN con su
`Makefile`.  Compilen y corran `small.e` y `big.e`.  Identifiquen los
errores que devuelven (¡si devuelven alguno!) los ejecutables.  Ahora
ejecuten `ulimit -s unlimited` en la terminal y vuelvan a
correrlo. Luego responder las siguientes preguntas:

- ¿Devuelven el mismo error que antes?
- Averigüen qué hicieron al ejecutar la sentencia `ulimit -s
unlimited`. Algunas pistas son: abran otra terminal distinta y fíjense
si vuelve al mismo error, fíjense la diferencia entre `ulimit -a`
antes y después de ejecutar `ulimit -s unlimited`, googleen, etcétera.
- La "solución" anterior, ¿es una solución en el sentido de debugging?
- ¿Cómo harían una solución más robusta que la anterior, que no
requiera tocar los `ulimits`?

-----------------------

## Valgrind

En la carpeta `valgrind/` hay ejemplos en C y FORTRAN que se pueden
ejecutar con valgrind. Describan el error y por qué sucede

valgrind --leak-check=full --track-origins=yes ./programa


## Funny

En la carpeta `funny/` hay un código de C. Describan las diferencias
de los ejecutables al compilar con y sin el flag `-DDEBUG`. ¿De dónde
vienen esas diferencias?

Violación de segmento (`core' generado)


I'm HERE !!!! 
Violación de segmento (`core' generado)






